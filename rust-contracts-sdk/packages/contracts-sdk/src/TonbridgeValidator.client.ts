/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Boolean} from "./types";
import {InstantiateMsg, ExecuteMsg, VdataHex, QueryMsg, MigrateMsg, ConfigResponse, ArrayOfUserFriendlyValidator, UserFriendlyValidator} from "./TonbridgeValidator.types";
export interface TonbridgeValidatorReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  getCandidatesForValidators: () => Promise<ArrayOfUserFriendlyValidator>;
  getValidators: () => Promise<ArrayOfUserFriendlyValidator>;
  isVerifiedBlock: ({
    rootHash
  }: {
    rootHash: string;
  }) => Promise<Boolean>;
}
export class TonbridgeValidatorQueryClient implements TonbridgeValidatorReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.getCandidatesForValidators = this.getCandidatesForValidators.bind(this);
    this.getValidators = this.getValidators.bind(this);
    this.isVerifiedBlock = this.isVerifiedBlock.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  getCandidatesForValidators = async (): Promise<ArrayOfUserFriendlyValidator> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_candidates_for_validators: {}
    });
  };
  getValidators = async (): Promise<ArrayOfUserFriendlyValidator> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_validators: {}
    });
  };
  isVerifiedBlock = async ({
    rootHash
  }: {
    rootHash: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_verified_block: {
        root_hash: rootHash
      }
    });
  };
}
export interface TonbridgeValidatorInterface extends TonbridgeValidatorReadOnlyInterface {
  contractAddress: string;
  sender: string;
  parseCandidatesRootBlock: ({
    boc
  }: {
    boc: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  initValidators: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setValidatorSet: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  verifyValidators: ({
    fileHash,
    rootHash,
    vdata
  }: {
    fileHash: string;
    rootHash: string;
    vdata: VdataHex[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addCurrentBlockToVerifiedSet: ({
    rootHash
  }: {
    rootHash: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  readStateProof: ({
    boc,
    rootHash
  }: {
    boc: string;
    rootHash: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  parseShardProofPath: ({
    boc
  }: {
    boc: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TonbridgeValidatorClient extends TonbridgeValidatorQueryClient implements TonbridgeValidatorInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.parseCandidatesRootBlock = this.parseCandidatesRootBlock.bind(this);
    this.initValidators = this.initValidators.bind(this);
    this.setValidatorSet = this.setValidatorSet.bind(this);
    this.verifyValidators = this.verifyValidators.bind(this);
    this.addCurrentBlockToVerifiedSet = this.addCurrentBlockToVerifiedSet.bind(this);
    this.readStateProof = this.readStateProof.bind(this);
    this.parseShardProofPath = this.parseShardProofPath.bind(this);
  }

  parseCandidatesRootBlock = async ({
    boc
  }: {
    boc: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      parse_candidates_root_block: {
        boc
      }
    }, _fee, _memo, _funds);
  };
  initValidators = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      init_validators: {}
    }, _fee, _memo, _funds);
  };
  setValidatorSet = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_validator_set: {}
    }, _fee, _memo, _funds);
  };
  verifyValidators = async ({
    fileHash,
    rootHash,
    vdata
  }: {
    fileHash: string;
    rootHash: string;
    vdata: VdataHex[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      verify_validators: {
        file_hash: fileHash,
        root_hash: rootHash,
        vdata
      }
    }, _fee, _memo, _funds);
  };
  addCurrentBlockToVerifiedSet = async ({
    rootHash
  }: {
    rootHash: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_current_block_to_verified_set: {
        root_hash: rootHash
      }
    }, _fee, _memo, _funds);
  };
  readStateProof = async ({
    boc,
    rootHash
  }: {
    boc: string;
    rootHash: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      read_state_proof: {
        boc,
        root_hash: rootHash
      }
    }, _fee, _memo, _funds);
  };
  parseShardProofPath = async ({
    boc
  }: {
    boc: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      parse_shard_proof_path: {
        boc
      }
    }, _fee, _memo, _funds);
  };
}